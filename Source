local player = game.Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

local guiName = "AdminGui"
local flying = false

local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")

local commands = {
	["/help"] = "Show list of available commands.",
	["/fly"] = "Fly your character.",
	["/unfly"] = "Unfly your character.",
	["/speed"] = "Change your walk speed. Usage: /speed [number]",
	["/fling"] = "Fling your character forcefully.",
}

local flyingSpeed = 80
local bv

-- We'll track key states here for smooth flying controls:
local keysDown = {
	W = false,
	A = false,
	S = false,
	D = false,
	Space = false,
}

-- Helper to compute fly direction based on keys pressed:
local function getFlyDirection()
	local dir = Vector3.new()
	if keysDown.W then dir = dir + Vector3.new(0, 0, -1) end
	if keysDown.S then dir = dir + Vector3.new(0, 0, 1) end
	if keysDown.A then dir = dir + Vector3.new(-1, 0, 0) end
	if keysDown.D then dir = dir + Vector3.new(1, 0, 0) end
	if keysDown.Space then dir = dir + Vector3.new(0, 1, 0) end
	return dir.Unit or Vector3.new()
end

local function createGUI()
	-- Remove old GUI if any
	local oldGui = PlayerGui:FindFirstChild(guiName)
	if oldGui then oldGui:Destroy() end

	-- GUI Setup
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = guiName
	screenGui.Parent = PlayerGui

	local mainFrame = Instance.new("Frame")
	mainFrame.Size = UDim2.new(0, 300, 0, 200)
	mainFrame.Position = UDim2.new(0, 10, 0.5, -100)
	mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	mainFrame.BorderSizePixel = 0
	mainFrame.Parent = screenGui

	local cmdBox = Instance.new("TextBox")
	cmdBox.Size = UDim2.new(1, -20, 0, 30)
	cmdBox.Position = UDim2.new(0, 10, 1, -40)
	cmdBox.PlaceholderText = "Type command here..."
	cmdBox.TextColor3 = Color3.new(1, 1, 1)
	cmdBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	cmdBox.ClearTextOnFocus = true
	cmdBox.Parent = mainFrame

	local outputLabel = Instance.new("TextLabel")
	outputLabel.Size = UDim2.new(1, -20, 1, -50)
	outputLabel.Position = UDim2.new(0, 10, 0, 10)
	outputLabel.TextColor3 = Color3.new(1, 1, 1)
	outputLabel.BackgroundTransparency = 1
	outputLabel.TextXAlignment = Enum.TextXAlignment.Left
	outputLabel.TextYAlignment = Enum.TextYAlignment.Top
	outputLabel.TextWrapped = true
	outputLabel.TextScaled = false
	outputLabel.Text = ""
	outputLabel.Parent = mainFrame

	-- Flying functions inside the GUI context
	local function startFlying()
		local char = player.Character
		if not char then
			outputLabel.Text = "Character not loaded."
			return
		end

		local hrp = char:FindFirstChild("HumanoidRootPart")
		local humanoid = char:FindFirstChild("Humanoid")
		if not hrp or not humanoid then
			outputLabel.Text = "Missing HumanoidRootPart or Humanoid."
			return
		end

		if bv and bv.Parent then bv:Destroy() end
		bv = Instance.new("BodyVelocity")
		bv.Name = "FlyVelocity"
		bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
		bv.Velocity = Vector3.new()
		bv.Parent = hrp

		flying = true
		outputLabel.Text = "Flying enabled."

		-- Fly loop, runs every frame
		local conn
		conn = RS.RenderStepped:Connect(function()
			if not flying or not bv.Parent then
				conn:Disconnect()
				if bv and bv.Parent then
					bv:Destroy()
				end
				return
			end

			local cf = workspace.CurrentCamera.CFrame
			local dir = getFlyDirection()
			bv.Velocity = cf:VectorToWorldSpace(dir) * flyingSpeed
		end)
	end

	local function stopFlying()
		flying = false
		if bv and bv.Parent then bv:Destroy() end
		outputLabel.Text = "Flying disabled."
	end

	-- Input handlers for flying keys
	local function onInputBegan(input, gameProcessed)
		if gameProcessed then return end
		if input.UserInputType == Enum.UserInputType.Keyboard then
			local keyName = input.KeyCode.Name
			if keysDown[keyName] ~= nil then
				keysDown[keyName] = true
			end
		end
	end

	local function onInputEnded(input, gameProcessed)
		if gameProcessed then return end
		if input.UserInputType == Enum.UserInputType.Keyboard then
			local keyName = input.KeyCode.Name
			if keysDown[keyName] ~= nil then
				keysDown[keyName] = false
			end
		end
	end

	-- Connect input only once when GUI created
	UIS.InputBegan:Connect(onInputBegan)
	UIS.InputEnded:Connect(onInputEnded)

	-- Command handler
	cmdBox.FocusLost:Connect(function(enterPressed)
		if not enterPressed then return end

		local input = cmdBox.Text
		local args = input:split(" ")
		local cmd = args[1]:lower()

		if cmd == "/help" then
			local list = "Available commands:\n"
			for k, v in pairs(commands) do
				list = list .. k .. " - " .. v .. "\n"
			end
			outputLabel.Text = list

		elseif cmd == "/fly" then
			if not flying then
				startFlying()
			else
				outputLabel.Text = "Already flying."
			end

		elseif cmd == "/unfly" then
			if flying then
				stopFlying()
			else
				outputLabel.Text = "Not flying."
			end

		elseif cmd == "/speed" then
			local speed = tonumber(args[2])
			if speed then
				local char = player.Character
				if char and char:FindFirstChild("Humanoid") then
					char.Humanoid.WalkSpeed = speed
					outputLabel.Text = "Speed set to " .. speed
				else
					outputLabel.Text = "No humanoid found."
				end
			else
				outputLabel.Text = "Invalid speed value."
			end

		elseif cmd == "/fling" then
			local char = player.Character
			if char and char:FindFirstChild("HumanoidRootPart") then
				local hrp = char.HumanoidRootPart

				for _, child in ipairs(hrp:GetChildren()) do
					if child:IsA("BodyVelocity") or child:IsA("BodyAngularVelocity") then
						child:Destroy()
					end
				end

				local flingBV = Instance.new("BodyVelocity")
				flingBV.Velocity = Vector3.new(0, 500, 0)
				flingBV.MaxForce = Vector3.new(400000, 400000, 400000)
				flingBV.Parent = hrp
				game.Debris:AddItem(flingBV, 0.3)
				outputLabel.Text = "Flinged!"
			else
				outputLabel.Text = "No character found."
			end

		else
			outputLabel.Text = "Unknown command. Type /help for commands."
		end

		cmdBox.Text = ""
	end)
end

-- Create GUI initially
createGUI()

-- Recreate GUI on respawn (with short wait)
player.CharacterAdded:Connect(function()
	wait(1)
	createGUI()
end)

-- Recreate GUI if removed accidentally
PlayerGui.ChildRemoved:Connect(function(child)
	if child.Name == guiName then
		wait(0.5)
		createGUI()
	end
end)
